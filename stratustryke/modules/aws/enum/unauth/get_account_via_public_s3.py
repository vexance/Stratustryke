from stratustryke.core.module import AWSModule
from stratustryke.core.credential import AWSCredential
from stratustryke.core.lib import StratustrykeException

class Module(AWSModule):
    def __init__(self, framework) -> None:
        super().__init__(framework)
        self._info = {
            'Authors': ['@vexance'],
            'Description': 'Determine AWS account id for a public S3 bucket or object',
            'Details': 'Requires auth credentials which can assume an AWS role which is able to perform S3:ListBucket and S3:GetObject calls on arbitrary buckets. Uses S3:ResourceAccount policy conditions applied when assuming a role to determine the AWS account id for a public S3 bucket or object. This is done by performing S3:ListBucket or S3:GetObject calls with various S3:ResourceAccount restrictions applied and seeing whether access is allowed. This technique is possible due to the support for wildcards within S3:ResourceAccount policy conditions. Most activity generated by this module will be logged to the account calling the S3 APIs.',
            'References': [
                'https://hackingthe.cloud/aws/enumeration/account_id_from_s3_bucket/',
                'https://github.com/WeAreCloudar/s3-account-search'
            ]
        }

        self._options.add_string('ROLE_ARN', 'Amazon resource name for the role to assume', True)
        self._options.add_string('S3_BUCKET', 'Target AWS S3 bucket to determine account for.', True)
        self._options.add_string('S3_OBJECT', 'S3 object key prefix for public objects', False)
        self._cred = None
        

    @property
    def search_name(self):
        return f'aws/enum/unauth/{self.name}'


    def policy(self, digits: str) -> dict:
        '''Generates S3:ResourceAccount policy with wildcards following supplied digits'''
        template = {
            'Version': '2012-10-17',
            'Statement': [
                {
                    'Sid': 'AllowResourceAccount',
                    'Effect': 'Allow',
                    'Action': 's3:*',
                    'Resource': '*',
                    'Condition': {
                        'StringLike': {'s3:ResourceAccount': [f'{digits}*']},
                    },
                },
            ],
        }

        return str(template).replace("'", '"')


    def assume_role(self, arn: str, policy: str = None) -> AWSCredential:
        '''Assumes the specified role with the supplied s3:ResourceAccount policy'''
        cred = self.get_cred()

        try:
            session = cred.session()
            client = session.client('sts')

            if policy:
                res = client.assume_role(RoleSessionName=f'stratustryke-{self.name}', RoleArn=arn, Policy=policy, DurationSeconds=900)

            else:
                res = client.assume_role(RoleSessionName=f'stratustryke-{self.name}', RoleArn=arn, DurationSeconds=900)

            creds = res.get('Credentials', {})
            access_key = creds.get('AccessKeyId', False)
            secret_key = creds.get('SecretAccessKey', False)
            token = creds.get('SessionToken', False)

            if not all([access_key, secret_key, token]):
                raise StratustrykeException(f'Error performing sts:AssumeRole for ARN: {arn}')

            return AWSCredential(f'stratustryke-{self.name}', access_key=access_key, secret_key=secret_key, session_token=token)

        except Exception as err:
            self.framework.print_error(f'{err}')
            return None


    def attempt_access(self, creds: AWSCredential) -> bool:
        '''Attempt to access the bucket/object with assumed role creds'''
        bucket = self.get_opt('S3_BUCKET')
        prefix = self.get_opt('S3_OBJECT')

        try:
            session = creds.session()
            client = session.client('s3')

            if prefix:
                res = client.head_object(Bucket=bucket, Key=prefix)
                return True
            
            else:
                res = client.head_object(Bucket=bucket)
                return True

        except Exception as err:
            if not (err.response.get('Error', {}).get('Code', "999") == '403'):
                raise StratustrykeException(f'{err}')

        return False


    def run(self):
        role_arn = self.get_opt('ROLE_ARN')
        
        self.framework.print_status('Verifying supplied credentials can assume designated role')
        role_creds = self.assume_role(role_arn)
        if role_creds == None:
            return False # Unable to assume role - error was already printed
        
        # Check if we can access the bucket/object without specifying a s3:ResourceAccount policy
        self.framework.print_status('Verifying bucket/object is public')
        try:
            res = self.attempt_access(role_creds)
        except StratustrykeException as err:
            self.framework.print_error(f'Cannot verify that the bucket/object is public')
            self.framework.print_error(f'{err}')
            return False

        # Now try and derive the account id with s3:ResourceAccount policies
        builder = ''
        self.framework.print_status('Starting account identification...')
        
        try:
            for iteration in range(0, 12): # max 12 iterations (12 digit account id) to prevent off-chance infinite loop
                for digit in range(0, 10): # iterate from 0-9
                    attempt = f'{builder}{digit}'
                    policy = self.policy(attempt)
                    role_creds = self.assume_role(role_arn, policy)
                    success = self.attempt_access(role_creds)
                        
                    if success:
                        builder = attempt
                        self.framework.print_status(f'Found digit: [{iteration+1}/12]')
                        break

        except StratustrykeException as err:
            self.framework.print_error('Error during account idenfication process')
            self.framework.print_error(f'{err}')
            return False


        if len(builder) < 12:
            self.framework.print_error('Something went wrong; 12 digit account id not found')
            return False

        else:
            self.framework.print_success(f'Identified AWS account id: {builder}')